<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Medicine Reminders - AI Recovery Trainer</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary-color: #667eea;
      --secondary-color: #764ba2;
      --accent-color: #f093fb;
      --success-color: #10b981;
      --warning-color: #f59e0b;
      --danger-color: #ef4444;
      --bg-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      --glass-bg: rgba(255, 255, 255, 0.25);
      --glass-border: rgba(255, 255, 255, 0.18);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', sans-serif;
      background: var(--bg-gradient);
      min-height: 100vh;
      color: white;
    }

    .particles {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 1;
    }

    .particle {
      position: absolute;
      width: 3px;
      height: 3px;
      background: rgba(255, 255, 255, 0.2);
      border-radius: 50%;
      animation: float 20s infinite linear;
    }

    @keyframes float {
      0% {
        transform: translateY(100vh) translateX(0px) rotate(0deg);
        opacity: 0;
      }
      10% {
        opacity: 1;
      }
      90% {
        opacity: 1;
      }
      100% {
        transform: translateY(-100vh) translateX(100px) rotate(360deg);
        opacity: 0;
      }
    }

    .navbar {
      background: rgba(255, 255, 255, 0.1) !important;
      backdrop-filter: blur(15px);
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
      position: relative;
      z-index: 1000;
      padding: 15px 0;
    }

    .navbar-brand {
      font-weight: 700;
      font-size: 1.5rem;
      color: white !important;
    }

    .nav-btn {
      backdrop-filter: blur(10px);
      background: rgba(255, 255, 255, 0.2) !important;
      border: 1px solid rgba(255, 255, 255, 0.3) !important;
      color: white !important;
      font-weight: 500;
      padding: 10px 20px;
      border-radius: 25px;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-block;
      cursor: pointer;
    }

    .nav-btn:hover {
      background: rgba(255, 255, 255, 0.3) !important;
      transform: translateY(-2px);
      color: white !important;
    }

    .main-content {
      padding: 40px 20px;
      position: relative;
      z-index: 100;
    }

    .glass-card {
      background: var(--glass-bg);
      backdrop-filter: blur(20px);
      border: 1px solid var(--glass-border);
      border-radius: 20px;
      padding: 30px;
      margin-bottom: 30px;
      box-shadow: 0 15px 35px rgba(0,0,0,0.1);
      color: white;
    }

    .page-header {
      text-align: center;
      margin-bottom: 40px;
      color: white;
    }

    .page-header h1 {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 10px;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }

    .stat-card {
      background: var(--glass-bg);
      backdrop-filter: blur(20px);
      border: 1px solid var(--glass-border);
      border-radius: 15px;
      padding: 20px;
      text-align: center;
      color: white;
      transition: all 0.3s ease;
    }

    .stat-icon {
      width: 50px;
      height: 50px;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 15px;
      font-size: 1.2rem;
      color: white;
    }

    .stat-number {
      font-size: 2rem;
      font-weight: 700;
      margin-bottom: 5px;
    }

    .stat-label {
      font-size: 0.9rem;
      opacity: 0.8;
    }

    .medicine-schedule {
      display: grid;
      gap: 15px;
    }

    .medicine-item {
      background: rgba(255, 255, 255, 0.1);
      border-radius: 15px;
      padding: 20px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      border-left: 4px solid var(--success-color);
    }

    .medicine-item.overdue {
      border-left-color: var(--danger-color);
      background: rgba(239, 68, 68, 0.1);
    }

    .medicine-item.upcoming {
      border-left-color: var(--warning-color);
      background: rgba(245, 158, 11, 0.1);
    }

    .medicine-item.taken {
      opacity: 0.7;
      background: rgba(16, 185, 129, 0.1);
    }

    .medicine-info h5 {
      margin: 0 0 5px 0;
      color: white;
      font-weight: 600;
    }

    .medicine-details {
      color: rgba(255, 255, 255, 0.8);
      font-size: 0.9rem;
    }

    .medicine-actions {
      display: flex;
      gap: 10px;
    }

    .btn-take, .btn-skip, .btn-snooze, .btn-undo {
      padding: 8px 16px;
      border: none;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .btn-take {
      background: var(--success-color);
      color: white;
    }

    .btn-skip {
      background: var(--danger-color);
      color: white;
    }

    .btn-snooze {
      background: var(--warning-color);
      color: white;
    }

    .btn-undo {
      background: rgba(255, 255, 255, 0.2);
      color: white;
    }

    .btn-take:hover, .btn-skip:hover, .btn-snooze:hover, .btn-undo:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    }

    .btn-action {
      background: linear-gradient(45deg, #f093fb, #f5576c);
      border: none;
      padding: 12px 20px;
      font-size: 0.9rem;
      font-weight: 600;
      border-radius: 25px;
      color: white;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-block;
      cursor: pointer;
    }

    .btn-action:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(240, 147, 251, 0.4);
      color: white;
      text-decoration: none;
    }

    .modal-content {
      background: rgba(17, 24, 39, 0.95) !important;
      color: white !important;
      border-radius: 16px !important;
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255, 255, 255, 0.1) !important;
    }

    .form-control, .form-select {
      background: rgba(255, 255, 255, 0.1) !important;
      border: 1px solid rgba(255, 255, 255, 0.2) !important;
      color: white !important;
    }

    .form-control:focus, .form-select:focus {
      background: rgba(255, 255, 255, 0.15) !important;
      border-color: var(--accent-color) !important;
      box-shadow: 0 0 0 0.2rem rgba(240, 147, 251, 0.25) !important;
      color: white !important;
    }

    .form-label {
      color: rgba(255, 255, 255, 0.9) !important;
      font-weight: 500;
    }

    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 20px;
      border-radius: 10px;
      color: white;
      font-weight: 500;
      z-index: 9999;
      transform: translateX(400px);
      transition: all 0.3s ease;
      min-width: 300px;
    }

    .notification.show {
      transform: translateX(0);
    }

    .notification.success {
      background: linear-gradient(45deg, #10b981, #34d399);
    }

    .notification.error {
      background: linear-gradient(45deg, #ef4444, #f87171);
    }

    .notification.warning {
      background: linear-gradient(45deg, #f59e0b, #fbbf24);
    }

    @media (max-width: 768px) {
      .stats-grid {
        grid-template-columns: repeat(2, 1fr);
      }
      
      .medicine-item {
        flex-direction: column;
        text-align: center;
      }
      
      .medicine-actions {
        margin-top: 15px;
      }
    }
  </style>
</head>
<body>

  <div class="particles" id="particles"></div>

  <nav class="navbar navbar-expand-lg">
    <div class="container">
      <a class="navbar-brand" href="/dashboard">
        <i class="fas fa-pills me-2"></i>Medicine Reminders
      </a>
      <div>
        <button class="nav-btn me-3" onclick="addNewMedicine()">
          <i class="fas fa-plus me-2"></i>Add Medicine
        </button>
        <a class="nav-btn" href="/dashboard">
          <i class="fas fa-arrow-left me-2"></i>Back to Dashboard
        </a>
      </div>
    </div>
  </nav>

  <div class="main-content">
    <div class="container">
      
      <div class="page-header">
        <h1><i class="fas fa-pills me-3"></i>Medicine Reminder System</h1>
        <p>Stay on track with your recovery medication schedule</p>
      </div>

      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-icon" style="background: linear-gradient(45deg, #10b981, #34d399);">
            <i class="fas fa-check-circle"></i>
          </div>
          <div class="stat-number" id="todayTaken">0</div>
          <div class="stat-label">Taken Today</div>
        </div>
        <div class="stat-card">
          <div class="stat-icon" style="background: linear-gradient(45deg, #f59e0b, #fbbf24);">
            <i class="fas fa-clock"></i>
          </div>
          <div class="stat-number" id="pendingCount">0</div>
          <div class="stat-label">Pending</div>
        </div>
        <div class="stat-card">
          <div class="stat-icon" style="background: linear-gradient(45deg, #ef4444, #f87171);">
            <i class="fas fa-exclamation-triangle"></i>
          </div>
          <div class="stat-number" id="missedCount">0</div>
          <div class="stat-label">Missed</div>
        </div>
        <div class="stat-card">
          <div class="stat-icon" style="background: linear-gradient(45deg, #8b5cf6, #a78bfa);">
            <i class="fas fa-percentage"></i>
          </div>
          <div class="stat-number" id="adherenceRate">100%</div>
          <div class="stat-label">Adherence Rate</div>
        </div>
      </div>

      <div class="row">
        <div class="col-lg-8">
          <div class="glass-card">
            <h3><i class="fas fa-calendar-day me-2"></i>Today's Schedule</h3>
            <div class="medicine-schedule" id="todaySchedule">
              <div style="text-align: center; padding: 40px; color: rgba(255,255,255,0.7);">
                <i class="fas fa-spinner fa-spin"></i> Loading schedule...
              </div>
            </div>
          </div>

          <div class="glass-card">
            <h3><i class="fas fa-list me-2"></i>All Medicines</h3>
            <div id="allMedicines">
              <div style="text-align: center; padding: 40px; color: rgba(255,255,255,0.7);">
                <i class="fas fa-spinner fa-spin"></i> Loading medicines...
              </div>
            </div>
          </div>
        </div>

        <div class="col-lg-4">
          <div class="glass-card">
            <h4><i class="fas fa-bolt me-2"></i>Quick Actions</h4>
            <div class="d-grid gap-2">
              <button class="btn btn-success" onclick="markAllTaken()">
                <i class="fas fa-check-double me-2"></i>Mark All as Taken
              </button>
              <button class="btn btn-info" onclick="testNotification()">
                <i class="fas fa-bell me-2"></i>Test Notification
              </button>
              <button class="btn btn-outline-light" onclick="loadData()">
                <i class="fas fa-refresh me-2"></i>Refresh Data
              </button>
            </div>
          </div>

          <div class="glass-card">
            <h4><i class="fas fa-history me-2"></i>Recent Activity</h4>
            <div id="recentActivity">
              <div style="color: rgba(255,255,255,0.7); padding: 20px;">
                No recent activity
              </div>
            </div>
          </div>
        </div>
      </div>

    </div>
  </div>

  <!-- Add Medicine Modal -->
  <div class="modal fade" id="addMedicineModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header border-0">
          <h5 class="modal-title">Add New Medicine</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form id="medicineForm">
            <div class="mb-3">
              <label class="form-label">Medicine Name *</label>
              <input type="text" class="form-control" id="medicineName" required>
            </div>
            <div class="mb-3">
              <label class="form-label">Dosage</label>
              <input type="text" class="form-control" id="medicineDosage" placeholder="e.g., 500mg">
            </div>
            <div class="mb-3">
              <label class="form-label">Frequency</label>
              <input type="text" class="form-control" id="medicineFrequency" placeholder="e.g., Twice daily">
            </div>
            <div class="mb-3">
              <label class="form-label">Times (one per line)</label>
              <textarea class="form-control" id="medicineTimes" rows="3" placeholder="08:00&#10;14:00&#10;20:00"></textarea>
              <small class="form-text text-muted">Enter times in 24-hour format (HH:MM), one per line</small>
            </div>
            <div class="mb-3">
              <label class="form-label">Start Date</label>
              <input type="date" class="form-control" id="medicineStartDate">
            </div>
            <div class="mb-3">
              <label class="form-label">Duration (days)</label>
              <input type="number" class="form-control" id="medicineDuration" value="30" min="1">
            </div>
          </form>
        </div>
        <div class="modal-footer border-0">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" onclick="saveMedicine()">Add Medicine</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Global variables
    let medicines = [];
    let medicineHistory = {};

    // Initialize the system
    document.addEventListener('DOMContentLoaded', function() {
      createParticles();
      loadData();
      setInterval(checkReminders, 60000); // Check every minute
      requestNotificationPermission();
      
      // Set today's date as default
      document.getElementById('medicineStartDate').value = new Date().toISOString().split('T')[0];
    });

    function createParticles() {
      const particles = document.getElementById('particles');
      const particleCount = 30;
      
      for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.classList.add('particle');
        particle.style.left = Math.random() * 100 + 'vw';
        particle.style.animationDelay = Math.random() * 20 + 's';
        particle.style.animationDuration = (Math.random() * 15 + 15) + 's';
        particles.appendChild(particle);
      }
    }

    function requestNotificationPermission() {
      if ('Notification' in window && Notification.permission === 'default') {
        Notification.requestPermission();
      }
    }

    async function loadData() {
      try {
        // Load medicines from server
        const response = await fetch('/api/medicines');
        if (response.ok) {
          const data = await response.json();
          showNotification('Medicine added successfully!', 'success');
          bootstrap.Modal.getInstance(document.getElementById('addMedicineModal')).hide();
          loadData(); // Refresh the data
        } else {
          throw new Error('Failed to add medicine');
        }
      } catch (error) {
        console.error('Error adding medicine:', error);
        showNotification('Failed to add medicine', 'error');
      }
    }

    async function deleteMedicine(medicineId, medicineName) {
      if (!confirm(`Are you sure you want to delete ${medicineName}?`)) {
        return;
      }

      try {
        const response = await fetch(`/api/medicines/${medicineId}`, {
          method: 'DELETE'
        });

        if (response.ok) {
          showNotification('Medicine deleted successfully!', 'success');
          loadData(); // Refresh the data
        } else {
          throw new Error('Failed to delete medicine');
        }
      } catch (error) {
        console.error('Error deleting medicine:', error);
        showNotification('Failed to delete medicine', 'error');
      }
    }

    function takeMedicine(scheduleKey, medicineName) {
      medicineHistory[scheduleKey] = 'taken';
      localStorage.setItem('medicineHistory', JSON.stringify(medicineHistory));
      
      // Also save to server if API is available
      saveMedicineHistoryToServer(scheduleKey, 'taken');
      
      renderTodaySchedule();
      updateStats();
      renderRecentActivity();
      showNotification(`✅ ${medicineName} marked as taken!`, 'success');
    }

    function skipMedicine(scheduleKey, medicineName) {
      medicineHistory[scheduleKey] = 'skipped';
      localStorage.setItem('medicineHistory', JSON.stringify(medicineHistory));
      
      // Also save to server if API is available
      saveMedicineHistoryToServer(scheduleKey, 'skipped');
      
      renderTodaySchedule();
      updateStats();
      renderRecentActivity();
      showNotification(`⏭️ ${medicineName} skipped`, 'warning');
    }

    function undoAction(scheduleKey) {
      delete medicineHistory[scheduleKey];
      localStorage.setItem('medicineHistory', JSON.stringify(medicineHistory));
      
      renderTodaySchedule();
      updateStats();
      renderRecentActivity();
      showNotification('Action undone', 'success');
    }

    async function saveMedicineHistoryToServer(scheduleKey, status) {
      try {
        const [date, medicineId, time] = scheduleKey.split('-');
        const medicine = medicines.find(m => m._id === medicineId);
        
        if (medicine) {
          await fetch('/api/medicine-history', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              medicineId,
              medicineName: medicine.name,
              scheduledDate: date,
              scheduledTime: time,
              status
            })
          });
        }
      } catch (error) {
        console.error('Error saving to server:', error);
      }
    }

    function markAllTaken() {
      const today = new Date().toISOString().split('T')[0];
      let count = 0;

      medicines.forEach(medicine => {
        if (!medicine.active || !medicine.times) return;
        
        medicine.times.forEach(time => {
          const scheduleKey = `${today}-${medicine._id}-${time}`;
          if (medicineHistory[scheduleKey] !== 'taken') {
            medicineHistory[scheduleKey] = 'taken';
            saveMedicineHistoryToServer(scheduleKey, 'taken');
            count++;
          }
        });
      });

      if (count > 0) {
        localStorage.setItem('medicineHistory', JSON.stringify(medicineHistory));
        renderTodaySchedule();
        updateStats();
        renderRecentActivity();
        showNotification(`✅ ${count} medicines marked as taken!`, 'success');
      } else {
        showNotification('All medicines already taken!', 'warning');
      }
    }

    function testNotification() {
      if ('Notification' in window && Notification.permission === 'granted') {
        new Notification('Medicine Reminder Test', {
          body: 'This is a test notification. Your reminders are working!',
          icon: '/favicon.ico'
        });
        showNotification('Test notification sent!', 'success');
      } else {
        showNotification('Notifications not supported or not permitted', 'warning');
      }
    }

    function checkReminders() {
      if ('Notification' in window && Notification.permission === 'granted') {
        const now = new Date();
        const today = now.toISOString().split('T')[0];
        const currentTime = now.getHours().toString().padStart(2, '0') + ':' + now.getMinutes().toString().padStart(2, '0');

        medicines.forEach(medicine => {
          if (!medicine.active || !medicine.times) return;

          medicine.times.forEach(time => {
            const scheduleKey = `${today}-${medicine._id}-${time}`;
            const status = medicineHistory[scheduleKey];

            // Check if it's time to take medicine and hasn't been taken yet
            if (time === currentTime && status !== 'taken' && status !== 'skipped') {
              new Notification(`Time to take your medicine!`, {
                body: `${medicine.name} (${medicine.dosage || 'dose not specified'})`,
                icon: '/favicon.ico'
              });
            }
          });
        });
      }
    }

    function showNotification(message, type = 'success') {
      // Remove existing notifications
      document.querySelectorAll('.notification').forEach(n => n.remove());

      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center;">
          <span>${message}</span>
          <button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; color: white; font-size: 1.2rem; cursor: pointer; opacity: 0.7;">
            <i class="fas fa-times"></i>
          </button>
        </div>
      `;

      document.body.appendChild(notification);

      // Show notification
      setTimeout(() => notification.classList.add('show'), 100);

      // Auto-hide after 5 seconds
      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
          if (notification.parentElement) {
            notification.remove();
          }
        }, 300);
      }, 5000);
    }

    // Auto-refresh data periodically
    setInterval(() => {
      updateStats();
      renderTodaySchedule();
    }, 60000); // Every minute
  </script>
</body>
</html> await response.json();
          medicines = data.medicines || [];
        } else {
          medicines = [];
        }

        // Load medicine history (simplified for demo)
        medicineHistory = JSON.parse(localStorage.getItem('medicineHistory') || '{}');

        renderTodaySchedule();
        renderAllMedicines();
        updateStats();
        renderRecentActivity();
      } catch (error) {
        console.error('Error loading data:', error);
        showNotification('Failed to load data', 'error');
      }
    }

    function renderTodaySchedule() {
      const schedule = document.getElementById('todaySchedule');
      const today = new Date().toISOString().split('T')[0];
      const currentTime = new Date();
      
      schedule.innerHTML = '';

      let todayMedicines = [];

      medicines.forEach(medicine => {
        if (!medicine.active) return;

        if (medicine.times && medicine.times.length > 0) {
          medicine.times.forEach(time => {
            const medicineTime = new Date(`${today}T${time}`);
            const scheduleKey = `${today}-${medicine._id}-${time}`;
            const status = medicineHistory[scheduleKey] || 'pending';

            let cssClass = 'medicine-item';
            let statusIcon = '<i class="fas fa-clock"></i>';
            
            if (status === 'taken') {
              cssClass += ' taken';
              statusIcon = '<i class="fas fa-check-circle text-success"></i>';
            } else if (medicineTime < currentTime) {
              cssClass += ' overdue';
              statusIcon = '<i class="fas fa-exclamation-triangle text-danger"></i>';
            } else if (medicineTime - currentTime < 30 * 60 * 1000) {
              cssClass += ' upcoming';
              statusIcon = '<i class="fas fa-bell text-warning"></i>';
            }

            todayMedicines.push({
              medicine,
              time,
              status,
              cssClass,
              statusIcon,
              scheduleKey
            });
          });
        }
      });

      if (todayMedicines.length === 0) {
        schedule.innerHTML = `
          <div style="text-align: center; padding: 40px; color: rgba(255,255,255,0.7);">
            <i class="fas fa-plus-circle" style="font-size: 3rem; margin-bottom: 20px;"></i>
            <h4>No medicines scheduled today</h4>
            <p>Click "Add Medicine" to start tracking your medications.</p>
          </div>
        `;
        return;
      }

      // Sort by time
      todayMedicines.sort((a, b) => a.time.localeCompare(b.time));

      todayMedicines.forEach(item => {
        const medicineItem = document.createElement('div');
        medicineItem.className = item.cssClass;
        medicineItem.innerHTML = `
          <div class="medicine-info">
            <h5>${item.statusIcon} ${item.medicine.name}</h5>
            <div class="medicine-details">
              <i class="fas fa-pills me-2"></i>${item.medicine.dosage || 'Not specified'}
              <span class="ms-3"><i class="fas fa-clock me-2"></i>${item.time}</span>
              <span class="ms-3 badge bg-${getStatusBadgeColor(item.status)}">${item.status.toUpperCase()}</span>
            </div>
          </div>
          <div class="medicine-actions">
            ${item.status === 'pending' ? `
              <button class="btn-take" onclick="takeMedicine('${item.scheduleKey}', '${item.medicine.name}')">
                <i class="fas fa-check me-1"></i>Take
              </button>
              <button class="btn-skip" onclick="skipMedicine('${item.scheduleKey}', '${item.medicine.name}')">
                <i class="fas fa-times me-1"></i>Skip
              </button>
            ` : `
              <button class="btn-undo" onclick="undoAction('${item.scheduleKey}')">
                <i class="fas fa-undo me-1"></i>Undo
              </button>
            `}
          </div>
        `;
        schedule.appendChild(medicineItem);
      });
    }

    function renderAllMedicines() {
      const container = document.getElementById('allMedicines');
      container.innerHTML = '';

      if (medicines.length === 0) {
        container.innerHTML = `
          <div style="text-align: center; padding: 40px; color: rgba(255,255,255,0.7);">
            <i class="fas fa-pills" style="font-size: 3rem; margin-bottom: 20px;"></i>
            <h4>No medicines added yet</h4>
            <p>Start by adding your first medicine to track your medication schedule.</p>
          </div>
        `;
        return;
      }

      medicines.forEach(medicine => {
        const medicineCard = document.createElement('div');
        medicineCard.className = 'medicine-item';
        medicineCard.innerHTML = `
          <div class="medicine-info">
            <h5><i class="fas fa-pills me-2"></i>${medicine.name}</h5>
            <div class="medicine-details">
              <i class="fas fa-weight me-2"></i>${medicine.dosage || 'Not specified'}
              <span class="ms-3"><i class="fas fa-clock me-2"></i>${medicine.frequency || 'Not specified'}</span>
              ${medicine.times ? `<span class="ms-3"><i class="fas fa-calendar me-2"></i>Times: ${medicine.times.join(', ')}</span>` : ''}
            </div>
          </div>
          <div class="medicine-actions">
            <button class="btn-undo" onclick="deleteMedicine('${medicine._id}', '${medicine.name}')">
              <i class="fas fa-trash me-1"></i>Delete
            </button>
          </div>
        `;
        container.appendChild(medicineCard);
      });
    }

    function getStatusBadgeColor(status) {
      switch(status) {
        case 'taken': return 'success';
        case 'skipped': return 'danger';
        case 'pending': return 'warning';
        default: return 'secondary';
      }
    }

    function updateStats() {
      const today = new Date().toISOString().split('T')[0];
      let taken = 0, pending = 0, missed = 0, total = 0;

      medicines.forEach(medicine => {
        if (!medicine.active || !medicine.times) return;
        
        medicine.times.forEach(time => {
          const scheduleKey = `${today}-${medicine._id}-${time}`;
          const status = medicineHistory[scheduleKey] || 'pending';
          const medicineTime = new Date(`${today}T${time}`);
          const currentTime = new Date();

          total++;
          if (status === 'taken') {
            taken++;
          } else if (status === 'skipped' || (status === 'pending' && medicineTime < currentTime)) {
            missed++;
          } else {
            pending++;
          }
        });
      });

      document.getElementById('todayTaken').textContent = taken;
      document.getElementById('pendingCount').textContent = pending;
      document.getElementById('missedCount').textContent = missed;
      
      const adherenceRate = total > 0 ? Math.round((taken / total) * 100) : 100;
      document.getElementById('adherenceRate').textContent = `${adherenceRate}%`;
    }

    function renderRecentActivity() {
      const container = document.getElementById('recentActivity');
      const activities = [];

      // Get recent activities from history
      Object.keys(medicineHistory).forEach(key => {
        const [date, medicineId, time] = key.split('-');
        const medicine = medicines.find(m => m._id === medicineId);
        if (medicine && medicineHistory[key] !== 'pending') {
          activities.push({
            date,
            time,
            medicine: medicine.name,
            status: medicineHistory[key]
          });
        }
      });

      activities.sort((a, b) => new Date(`${b.date}T${b.time}`) - new Date(`${a.date}T${a.time}`));

      if (activities.length === 0) {
        container.innerHTML = `
          <div style="color: rgba(255,255,255,0.7); padding: 20px; text-align: center;">
            No recent activity
          </div>
        `;
        return;
      }

      const recentActivities = activities.slice(0, 5);
      container.innerHTML = recentActivities.map(activity => `
        <div style="padding: 10px; border-bottom: 1px solid rgba(255,255,255,0.1);">
          <strong>${activity.medicine}</strong><br>
          <small style="color: rgba(255,255,255,0.7);">
            ${activity.status} at ${activity.time} on ${activity.date}
          </small>
        </div>
      `).join('');
    }

    function addNewMedicine() {
      const modal = new bootstrap.Modal(document.getElementById('addMedicineModal'));
      document.getElementById('medicineForm').reset();
      document.getElementById('medicineStartDate').value = new Date().toISOString().split('T')[0];
      modal.show();
    }

    async function saveMedicine() {
      const form = document.getElementById('medicineForm');
      const name = document.getElementById('medicineName').value.trim();
      const dosage = document.getElementById('medicineDosage').value.trim();
      const frequency = document.getElementById('medicineFrequency').value.trim();
      const timesText = document.getElementById('medicineTimes').value.trim();
      const startDate = document.getElementById('medicineStartDate').value;
      const duration = parseInt(document.getElementById('medicineDuration').value) || 30;

      if (!name) {
        showNotification('Please enter a medicine name', 'error');
        return;
      }

      // Parse times
      const times = timesText.split('\n').map(t => t.trim()).filter(t => t && /^\d{2}:\d{2}$/.test(t));

      const medicineData = {
        name,
        dosage,
        frequency,
        times,
        startDate,
        duration
      };

      try {
        const response = await fetch('/api/medicines', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(medicineData)
        });

        if (response.ok) {
          const data =